name: CI - Análisis de Código C++

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  cppcheck:
    name: Análisis Estático con CPPCheck
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔧 Instalar CPPCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck

      - name: 📊 Verificar versión de CPPCheck
        run: cppcheck --version

      - name: 🔍 Ejecutar análisis estático
        run: |
          echo "🔍 Ejecutando CPPCheck en el proyecto..."
          cppcheck --enable=all \
                   --std=c++17 \
                   --platform=unix64 \
                   --suppress=missingIncludeSystem \
                   --suppress=unusedFunction \
                   --inline-suppr \
                   --error-exitcode=1 \
                   --xml \
                   --xml-version=2 \
                   src/ include/ main.cpp 2> cppcheck-report.xml

      - name: 📋 Mostrar reporte en consola
        if: always()
        run: |
          echo "📋 Reporte de CPPCheck:"
          cppcheck --enable=all \
                   --std=c++17 \
                   --suppress=missingIncludeSystem \
                   --suppress=unusedFunction \
                   src/ include/ main.cpp

      - name: 📄 Subir reporte XML como artefacto
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cppcheck-report
          path: cppcheck-report.xml
          retention-days: 30

  build-test:
    name: Compilación y Pruebas
    runs-on: ubuntu-latest
    needs: cppcheck

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🔧 Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential g++ make

      - name: 📁 Crear directorios necesarios
        run: |
          mkdir -p obj data

      - name: 🏗️ Compilar proyecto
        run: |
          echo "🏗️ Compilando proyecto..."
          make clean
          make

      - name: 📋 Configurar datos de prueba
        run: |
          echo "📋 Configurando datos de prueba..."
          make setup-data

      - name: ✅ Verificar ejecutable
        run: |
          echo "✅ Verificando que el ejecutable se creó correctamente..."
          ls -la biblioteca
          file biblioteca

      - name: 🧪 Ejecutar prueba básica
        run: |
          echo "🧪 Ejecutando prueba básica del programa..."
          echo "9" | timeout 10s ./biblioteca || true
          echo "Prueba completada"

  code-quality:
    name: Análisis de Calidad Adicional
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 📊 Contar líneas de código
        run: |
          echo "📊 Estadísticas del proyecto:"
          echo "Total de archivos:"
          find . -name "*.cpp" -o -name "*.h" | wc -l
          echo "Líneas de código:"
          find . -name "*.cpp" -o -name "*.h" | xargs wc -l | tail -1
          echo "Archivos por tipo:"
          echo "Headers (.h):" 
          find . -name "*.h" | wc -l
          echo "Implementaciones (.cpp):"
          find . -name "*.cpp" | wc -l

      - name: 🔍 Verificar estructura del proyecto
        run: |
          echo "🔍 Verificando estructura del proyecto..."
          echo "Directorios esperados:"
          ls -la | grep "^d"
          echo "Archivos principales:"
          ls -la *.cpp *.md Makefile 2>/dev/null || true
          echo "Headers en include/:"
          ls -la include/ 2>/dev/null || true
          echo "Implementaciones en src/:"
          ls -la src/ 2>/dev/null || true
